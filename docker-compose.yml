version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    container_name: llm_chat_interface_frontend
    ports:
      - "3000:80"  # HTTP
      - "3443:443" # HTTPS
    volumes:
      - ./certs/${APP_ENV:-dev}:/etc/nginx/certs:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DOCKER=true

  backend:
    build:
      context: ./backend
    container_name: llm_chat_interface_backend
    ports:
      - "8000:8000"  # HTTP
      - "8443:8443"  # HTTPS
    volumes:
      - ./certs:/app/certs:ro
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DOCKER=${DOCKER:-true}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SERVER_IP=${SERVER_IP:-192.168.0.166}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dev_user}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-app_db}
    depends_on:
      - postgres
    command: ["python", "run.py"]

  postgres:
    image: postgres:15-alpine
    container_name: llm_chat_interface_postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-dev_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password}
      - POSTGRES_DB=${POSTGRES_DB:-app_db}
    ports:
      - "5432:5432"

volumes:
  postgres_data:
    name: llm_chat_interface_postgres_data